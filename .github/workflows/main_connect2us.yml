name: Deploy Connect2Us to Azure

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
        - development
        - staging
        - production

env:
  AZURE_WEBAPP_NAME: connect2us-app    # set this to your application's name
  AZURE_WEBAPP_PACKAGE_PATH: '.'       # set this to the path to your web app project, defaults to the repository root
  AZURE_SQL_CONNECTION_STRING: Server=tcp:connect2usserver.database.windows.net,1433;Initial Catalog=Connect2US;Persist Security Info=False;User ID=Connect_Admin;Password=Test@123;MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;
  AZURE_SQL_CONNECTION_STRING_STAGING: ${{ secrets.AZURE_SQL_CONNECTION_STRING_STAGING }}
  DOTNET_VERSION: '4.8'
  AZURE_WEBAPP_PUBLISH_PROFILE: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
  AZURE_WEBAPP_PUBLISH_PROFILE_STAGING: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE_STAGING }}

jobs:
  build:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v2
      with:
        vs-version: '[17.0,18.0)'
    
    - name: Setup NuGet
      uses: NuGet/setup-nuget@v2
      with:
        nuget-version: 'latest'
    
    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.config') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
    
    - name: Restore NuGet packages
      run: nuget restore Connect2Us.2.sln
    
    - name: Build solution
      run: msbuild Connect2Us.2.sln /p:Configuration=Release /p:Platform="AnyCPU"
    
    - name: Run tests
      run: |
        # Add test commands here if you have unit tests
        echo "Running tests..."
        # dotnet test --configuration Release --no-build
    
# No artifact upload needed for Web Deploy

  deploy-staging:
    runs-on: windows-latest
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment:
      name: 'staging'
      url: ${{ steps.deploy-to-azure.outputs.webapp-url }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v2
      with:
        vs-version: '[17.0,18.0)'
    
    - name: Setup NuGet
      uses: NuGet/setup-nuget@v2
      with:
        nuget-version: 'latest'
    
    - name: Restore NuGet packages
      run: nuget restore Connect2Us.2.sln
    
    - name: Build solution
      run: msbuild Connect2Us.2.sln /p:Configuration=Release /p:Platform="AnyCPU"
    
    - name: Deploy to Azure Web App (Staging) using MSDeploy
      run: msbuild Connect2Us.2.csproj `
        /p:Configuration=Release `
        /p:Platform="AnyCPU" `
        /p:DeployOnBuild=true `
        /p:PublishProfile="Connect2Us - Web Deploy Staging" `
        /p:AllowUntrustedCertificate=true `
        /p:UserName="$connect2us-gzangpd0gaftcnhs-staging" `
        /p:Password="${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE_STAGING }}" `
        /p:VisualStudioVersion=17.0 `
        /p:EnableMSDeployBackup=true `
        /p:SkipExtraFilesOnServer=True
    
    - name: Update database (Staging)
      shell: pwsh
      run: |
        # Update staging database
        echo "Updating staging database..."
        # Use our Migrate-Database.ps1 script to update database
        & powershell -ExecutionPolicy Bypass -File ".\Migrate-Database.ps1" `
          -ConnectionString "${{ secrets.AZURE_SQL_CONNECTION_STRING_STAGING }}" `
          -UpdateDatabase
    
    - name: Run smoke tests (Staging)
      run: |
        # Add smoke tests here
        echo "Running smoke tests on staging..."
        # curl -f https://${{ env.AZURE_WEBAPP_NAME }}-staging.azurewebsites.net/ || exit 1

  deploy-production:
    needs: deploy-staging
    runs-on: windows-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment:
      name: 'production'
      url: ${{ steps.deploy-to-azure.outputs.webapp-url }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v2
      with:
        vs-version: '[17.0,18.0)'
    
    - name: Setup NuGet
      uses: NuGet/setup-nuget@v2
      with:
        nuget-version: 'latest'
    
    - name: Restore NuGet packages
      run: nuget restore Connect2Us.2.sln
    
    - name: Build solution
      run: msbuild Connect2Us.2.sln /p:Configuration=Release /p:Platform="AnyCPU"
    
    - name: Deploy to Azure Web App (Production) using MSDeploy
      run: msbuild Connect2Us.2.csproj `
        /p:Configuration=Release `
        /p:Platform="AnyCPU" `
        /p:DeployOnBuild=true `
        /p:PublishProfile="Connect2Us - Web Deploy" `
        /p:AllowUntrustedCertificate=true `
        /p:UserName="$connect2us-gzangpd0gaftcnhs" `
        /p:Password="${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}" `
        /p:VisualStudioVersion=17.0 `
        /p:EnableMSDeployBackup=true `
        /p:SkipExtraFilesOnServer=True
    
    - name: Update database (Production)
      shell: pwsh
      run: |
        # Update production database
        echo "Updating production database..."
        # Use our Migrate-Database.ps1 script to update database
        & powershell -ExecutionPolicy Bypass -File ".\Migrate-Database.ps1" `
          -ConnectionString "${{ secrets.AZURE_SQL_CONNECTION_STRING }}" `
          -UpdateDatabase
    
    - name: Run health check (Production)
      run: |
        # Add health check here
        echo "Running health check on production..."
        # curl -f https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/ || exit 1
    
    - name: Notify deployment success
      if: success()
      run: |
        echo "Deployment to production completed successfully!"
        # Add notification logic here (email, Slack, Teams, etc.)

  database-migration:
    needs: build
    runs-on: windows-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v2
      with:
        vs-version: '[17.0,18.0)'
    
    - name: Setup NuGet
      uses: NuGet/setup-nuget@v2
      with:
        nuget-version: 'latest'
    
    - name: Restore NuGet packages
      run: nuget restore Connect2Us.2.sln
    
    - name: Build solution
      run: msbuild Connect2Us.2.sln /p:Configuration=Release /p:Platform="AnyCPU"
    
    - name: Create database migration script
      run: msbuild Connect2Us.2.csproj `
        /p:Configuration=Release `
        /p:Platform="AnyCPU" `
        /p:DeployOnBuild=true `
        /p:PublishProfile="Connect2Us - Web Deploy" `
        /p:AllowUntrustedCertificate=true `
        /p:UserName="$connect2us-gzangpd0gaftcnhs" `
        /p:Password="${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}" `
        /p:VisualStudioVersion=17.0 `
        /p:EnableMSDeployBackup=true `
        /p:SkipExtraFilesOnServer=True `
        /p:EnableSqlPackage=true `
        /p:SqlPublishProfilePath="Properties\PublishProfiles\Connect2Us - Web Deploy.pubxml" `
        /p:SqlConnectionString="${{ secrets.AZURE_SQL_CONNECTION_STRING }}"
    
    - name: Upload migration script
      uses: actions/upload-artifact@v4
      with:
        name: migration-script
        path: migration-script.sql
        retention-days: 30

  security-scan:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run security scan
      run: |
        # Add security scanning tools here
        echo "Running security scan..."
        # dotnet list package --vulnerable --include-transitive
    
    - name: Run code analysis
      run: |
        # Add static code analysis here
        echo "Running code analysis..."
        # dotnet build --verbosity normal /p:TreatWarningsAsErrors=true

  performance-test:
    needs: deploy-staging
    runs-on: windows-latest
    if: github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run performance tests
      run: |
        # Add performance testing here
        echo "Running performance tests..."
        # Add your performance testing tools and scripts
    
    - name: Generate performance report
      run: |
        # Generate performance test report
        echo "Generating performance report..."
        # Add your report generation logic here