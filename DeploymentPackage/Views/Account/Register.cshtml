@model Connect2Us.Models.RegisterViewModel
@{
    ViewBag.Title = "Register";
}

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card shadow">
                <div class="card-header bg-primary text-white">
                    <h2 class="text-center mb-0">@ViewBag.Title</h2>
                </div>
                <div class="card-body">
                    @using (Html.BeginForm("Register", "Account", FormMethod.Post, new { @class = "form-horizontal", role = "form", id = "registerForm" }))
                    {
                        @Html.AntiForgeryToken()
                        @Html.ValidationSummary("", new { @class = "text-danger" })

                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    @Html.LabelFor(m => m.FirstName, new { @class = "form-label" })
                                    @Html.TextBoxFor(m => m.FirstName, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(m => m.FirstName, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    @Html.LabelFor(m => m.LastName, new { @class = "form-label" })
                                    @Html.TextBoxFor(m => m.LastName, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(m => m.LastName, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>

                        <div class="mb-3">
                            @Html.LabelFor(m => m.Email, new { @class = "form-label" })
                            @Html.TextBoxFor(m => m.Email, new { @class = "form-control" })
                            @Html.ValidationMessageFor(m => m.Email, "", new { @class = "text-danger" })
                        </div>

                        <div class="mb-3">
                            @Html.LabelFor(m => m.Phone, new { @class = "form-label" })
                            @Html.TextBoxFor(m => m.Phone, new { @class = "form-control" })
                            @Html.ValidationMessageFor(m => m.Phone, "", new { @class = "text-danger" })
                        </div>

                        <div class="mb-3">
                            @Html.LabelFor(m => m.Address, new { @class = "form-label" })
                            @Html.TextAreaFor(m => m.Address, new { @class = "form-control", rows = "3" })
                            @Html.ValidationMessageFor(m => m.Address, "", new { @class = "text-danger" })
                        </div>

                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    @Html.LabelFor(m => m.Password, new { @class = "form-label" })
                                    <div class="input-group">
                                        @Html.PasswordFor(m => m.Password, new { @class = "form-control", id = "password" })
                                        <button class="btn btn-outline-secondary" type="button" id="togglePassword">
                                            <i class="bi bi-eye"></i>
                                        </button>
                                    </div>
                                    @Html.ValidationMessageFor(m => m.Password, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    @Html.LabelFor(m => m.ConfirmPassword, new { @class = "form-label" })
                                    <div class="input-group">
                                        @Html.PasswordFor(m => m.ConfirmPassword, new { @class = "form-control", id = "confirmPassword" })
                                        <button class="btn btn-outline-secondary" type="button" id="toggleConfirmPassword">
                                            <i class="bi bi-eye"></i>
                                        </button>
                                    </div>
                                    @Html.ValidationMessageFor(m => m.ConfirmPassword, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>

                        <div class="mb-3">
                            @Html.LabelFor(m => m.UserType, new { @class = "form-label" })
                            @Html.DropDownListFor(m => m.UserType, (SelectList)ViewBag.UserType, "-- Select User Type --", new { @class = "form-select", id = "userType" })
                            @Html.ValidationMessageFor(m => m.UserType, "", new { @class = "text-danger" })
                        </div>

                        <!-- Bookstore specific fields -->
                        <div id="bookstoreFields" style="display: none;">
                            <div class="mb-3">
                                @Html.LabelFor(m => m.BusinessName, new { @class = "form-label" })
                                @Html.TextBoxFor(m => m.BusinessName, new { @class = "form-control" })
                                @Html.ValidationMessageFor(m => m.BusinessName, "", new { @class = "text-danger" })
                            </div>
                            <div class="mb-3">
                                @Html.LabelFor(m => m.Description, new { @class = "form-label" })
                                @Html.TextAreaFor(m => m.Description, new { @class = "form-control", rows = "3" })
                                @Html.ValidationMessageFor(m => m.Description, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <!-- Delivery Driver specific fields -->
                        <div id="driverFields" style="display: none;">
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        @Html.LabelFor(m => m.LicenseNumber, new { @class = "form-label" })
                                        @Html.TextBoxFor(m => m.LicenseNumber, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(m => m.LicenseNumber, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        @Html.LabelFor(m => m.VehicleType, new { @class = "form-label" })
                                        @Html.TextBoxFor(m => m.VehicleType, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(m => m.VehicleType, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                            <div class="mb-3">
                                @Html.LabelFor(m => m.VehicleRegistration, new { @class = "form-label" })
                                @Html.TextBoxFor(m => m.VehicleRegistration, new { @class = "form-control" })
                                @Html.ValidationMessageFor(m => m.VehicleRegistration, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="d-grid gap-2">
                            <button type="submit" class="btn btn-primary btn-lg">Register</button>
                        </div>
                    }

                    <hr class="my-4">

                    <div class="text-center">
                        <p>Already have an account?</p>
                        @Html.ActionLink("Log in", "Login", null, new { @class = "btn btn-outline-primary" })
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        $(document).ready(function() {
            function toggleFields() {
                var userType = $('#userType').val();
                $('#bookstoreFields').hide();
                $('#driverFields').hide();
                
                if (userType === 'Bookstore') {
                    $('#bookstoreFields').show();
                } else if (userType === 'DeliveryDriver') {
                    $('#driverFields').show();
                }
            }
            
            $('#userType').change(toggleFields);
            toggleFields(); // Call on page load

            // Password visibility toggle
            document.getElementById('togglePassword').addEventListener('click', function () {
                const passwordInput = document.getElementById('password');
                const toggleButton = document.getElementById('togglePassword');
                const icon = toggleButton.querySelector('i');
                
                if (passwordInput.type === 'password') {
                    passwordInput.type = 'text';
                    icon.classList.remove('bi-eye');
                    icon.classList.add('bi-eye-slash');
                } else {
                    passwordInput.type = 'password';
                    icon.classList.remove('bi-eye-slash');
                    icon.classList.add('bi-eye');
                }
            });

            document.getElementById('toggleConfirmPassword').addEventListener('click', function () {
                const confirmPasswordInput = document.getElementById('confirmPassword');
                const toggleButton = document.getElementById('toggleConfirmPassword');
                const icon = toggleButton.querySelector('i');
                
                if (confirmPasswordInput.type === 'password') {
                    confirmPasswordInput.type = 'text';
                    icon.classList.remove('bi-eye');
                    icon.classList.add('bi-eye-slash');
                } else {
                    confirmPasswordInput.type = 'password';
                    icon.classList.remove('bi-eye-slash');
                    icon.classList.add('bi-eye');
                }
            });
        });
    </script>
}